import os


################################### Quick documentation ############################

#Files needed by pipeline (better symlink them):
# - GenomeAnalysisTK.jar
# - reference.fa
# - reference.fa.fai samtools faidx <reference.fa>
# - reference.dict java -jar CreateSequenceDictionary.jar R=reference.fasta O=reference.dict
# - annotation dirctory containing 00-All.vcf.idx 00-All.vcf
# - snpEff.jar
# - SnpSift.jar
# - snpEff.config


################################ Scons Settings  #######################################

vars = Variables("settings.py")
vars.Add('reference', 'The genome reference in fasta format', "reference.fa")
vars.Add('referenceDir', 'The path to the directory containing the reference file', "./annotation")
vars.Add('reads1', 'The the name of the fastq files with the first pair of paired end reads', "reads1.fastq.gz")
vars.Add('reads2', 'The the name of the fastq files with the second pair of paired end reads', "reads2.fastq.gz")
vars.Add('removeNs', 'y/n if Ns if should trim flanking Ns from reads', "n")
vars.Add('removeSoftClipped', 'y/n if soft clipped reads should be removed from bam file', "n")
vars.Add('sampleName', 'An identifier for the sample', "sample")
vars.Add('projectName', 'A name for the project', "project")
vars.Add('exomeRegions', 'The bed file with exome caputered regions. This file must be located in the annotaion directory', "nexterarapidcapture_exome_targetedregions_v1.2.bed")
vars.Add('dbsnpVCF', 'The name of the vcf file downloaded from dbSNP database', "All_20151104.vcf")
vars.Add('annotationDir', 'Path to the directory with annotation files', "~/annotation")
vars.Add('gatkJarDir', 'The path to the directory to containing the GenomeAnalysisTK.jar file', "~/local/GenomeAnalysisTK/")
vars.Add('processors', 'Number of CPUs to be used', "2")
vars.Add('maxMemory', 'Max memory to be used (in bytes)', "1000000000")

#Scons settings Section
env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
env.AppendENVPath('PATH', os.getcwd())
Decider('timestamp-newer')


######################################################################################################
###########################     Arguments     ########################################################
######################################################################################################

#Filename of the reference human genome
reference = ARGUMENTS.get("reference", env["reference"])

#The reference directory should contain the fasta file with the human genome and the index build 
#by bwa with the bwa index <genome.fasta> command (it produces the a bunch of files with these extensions:
# - .amb
# - .ann
# - .bwt
# - .pac
# - .sa

# - reference.fa.fai obtained by samtools faidx <reference.fa>
# - reference.dict obtained by java -jar CreateSequenceDictionary.jar R=reference.fasta O=reference.dict
referenceDir = ARGUMENTS.get("referenceDir", env["referenceDir"])
if not referenceDir.endswith("/"): referenceDir = referenceDir + "/"

gatkJarDir = ARGUMENTS.get("gatkJarDir", env["gatkJarDir"])
if not gatkJarDir.endswith("/"): gatkJarDir = gatkJarDir + "/"

annotationDir = ARGUMENTS.get("annotationDir", env["annotationDir"])
if not annotationDir.endswith("/"): annotationDir = annotationDir + "/"

dbsnpVCF = ARGUMENTS.get("dbsnpVCF", env["dbsnpVCF"])

reads1 = ARGUMENTS.get("reads1", env["reads1"])
reads2 = ARGUMENTS.get("reads2", env["reads2"])

exomeRegions = ARGUMENTS.get("exomeRegions", env["exomeRegions"])

projectName = ARGUMENTS.get("projectName", env["projectName"] )
sampleName = ARGUMENTS.get("sampleName", env["sampleName"])

removeNs = ARGUMENTS.get("removeNs", env["removeNs"])

removeSoftClipped = ARGUMENTS.get("removeSoftClipped", env["removeSoftClipped"])

processors = ARGUMENTS.get("processors", env["processors"])

maxMemory = ARGUMENTS.get("maxMemory", env["maxMemory"])


######################################################################################################
########################### Remove Ns from reads #####################################################
######################################################################################################

removeNsFromReadsCMD = "cutadapt -A XXX --trim-n -o ${TARGETS[0]} -p ${TARGETS[1]} ${SOURCES[0]} ${SOURCES[1]}"
if removeNs == "y":
    removeNsFromReads = env.Command(["r1_no_Ns.fastq.gz", "r2_no_Ns.fastq.gz"], [reads1,reads2], removeNsFromReadsCMD)
    reads1 = "r1_no_Ns.fastq.gz"
    reads2 = "r2_no_Ns.fastq.gz"
else:
    removeNsFromReads = env.Command([], [], "")



######################################################################################################
########################### BWA MEM Alignment ########################################################
######################################################################################################

#referenceWithoutSuffix = ".".join(reference.split(".")[:-1]) 



#Without -M, a split read is flagged as 2048 ( supplementary alignment ) 
#see http://picard.sourceforge.net/explain-flags.html . This flag is a recent addition to the SAM spec.
#with option -M it is flagged as a duplicate flag=256 ( not primary alignment ):
#will be ignored by most 'old' tools.
#
#
##Keep only read mapped in proper pair and 
#remove reads with map quality 0 (multiple mapping and and unmapped reads, this ones are removed
#by -f 2)
#Remove reads with flag 256 (not primary alignment)

if removeSoftClipped == "y":
    bwaCMD = "bwa mem -M -R \"@RG\\tID:{}\\tLB:{}\\tSM:{}\\tPL:ILLUMINA\"  -t {} {}{} <(zcat {}) <(zcat {}) |  samtools view -S -h -q 1 -f 2 -F 256 - | python sam_remove_soft_clipping.py | samtools view -h -Sb - > $TARGET".format(sampleName, "exome", sampleName, processors, referenceDir, reference, reads1, reads2 )
else:
    bwaCMD = "bwa mem -M -R \"@RG\\tID:{}\\tLB:{}\\tSM:{}\\tPL:ILLUMINA\"  -t {} {}{} <(zcat {}) <(zcat {}) |  samtools view -Sb -h -q 1 -f 2 -F 256 -  > $TARGET".format(sampleName, "exome", sampleName, processors, referenceDir, reference, reads1, reads2 )
bwa = env.Command(["mapping.bam"], [removeNsFromReads], bwaCMD )



sortBamCMD = "samtools sort -o -m {} $SOURCE unused_parameter  > $TARGET".format(maxMemory)
sortBam = env.Command(["mapping-sorted.bam"], [bwa], sortBamCMD)



#######################################################################################################
########################### Removal of PCR duplicates ################################################
######################################################################################################

pcrRemovalCMD = "samtools rmdup -S $SOURCE $TARGET"
pcrRemoval = env.Command(["mapping-sorted-rmdup.bam"], [sortBam], pcrRemovalCMD)

pcrRemovalIndexCMD = "samtools index $SOURCE"
pcrRemovalIndex = env.Command(["mapping-sorted-rmdup.bam.bai"], [pcrRemoval], pcrRemovalIndexCMD)


#######################################################################################################
############################ Local realignment around indels ##########################################
#######################################################################################################


#Table of putative indels
putativeIndelsTableCMD = "java -Xmx4g -jar {}GenomeAnalysisTK.jar -T RealignerTargetCreator -R {}{} -o $TARGET  -I $SOURCE".format(gatkJarDir, referenceDir, reference)
putativeIndelsTable = env.Command(["realigning.intervals"], [pcrRemoval,pcrRemovalIndex], putativeIndelsTableCMD)


#Local realignment around indels
indelRealignerCmd = "java -Xmx4g -jar {}GenomeAnalysisTK.jar -R {}".format(gatkJarDir, referenceDir) + reference +  " -I ${SOURCES[0]} -T IndelRealigner -targetIntervals ${SOURCES[1]} -o $TARGET"
indelRealignment = env.Command(["mapping-sorted-rmdup-realigned.bam"], [pcrRemoval, putativeIndelsTable], indelRealignerCmd)


#######################################################################################################
############################ Quality score recalibration ##############################################
#######################################################################################################

recalibrationTableCMD = "java -Xmx4g -jar {}GenomeAnalysisTK.jar -T BaseRecalibrator -I $SOURCE -R {}{}  -knownSites {}{} -o $TARGET".format(gatkJarDir,referenceDir,reference,annotationDir,dbsnpVCF)
recalibrationTable = env.Command(["{}.grp".format(projectName)], [indelRealignment], recalibrationTableCMD)


renderReadsCMD = "java -jar {}GenomeAnalysisTK.jar -T PrintReads -R {}{}".format(gatkJarDir,referenceDir,reference) + " -I ${SOURCES[0]} -BQSR ${SOURCES[1]} -o $TARGET"
renderReads = env.Command(["mapping-sorted-rmdup-realigned-recal.bam"], [indelRealignment, recalibrationTable], renderReadsCMD)



#######################################################################################################
############################  Statistics ##############################################################
#######################################################################################################

coverageHistCMD = "bedtools coverage -hist -abam $SOURCE -b {}{}".format(annotationDir,exomeRegions) + " | grep ^all > $TARGET"
coverageHist = env.Command(["coverage-hist.txt"], [renderReads], coverageHistCMD)
